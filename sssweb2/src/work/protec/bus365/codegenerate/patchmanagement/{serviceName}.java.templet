package ${servicePackageName};

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.persistence.Query;

import ${modelPackageName}.${modelName};
import models.Result;
import play.Logger;
import play.db.jpa.JPA;
import utils.CommonUtil;
import utils.JSONUtil;

public class ${serviceName}{

	//条件查询
	public Map<String, Object> search(Map<String,Object> paramMap, int page, int rows){
		Map<String,Object> map=null;
		try {
			String condition = "";
			List<Object> paramList = new ArrayList<Object>();
	#for(String columnName : serviceParamMap.searchParamList)
		#set(String columnType=tableInfo.columnInfoMap.get(columnName).javaType)
		#if(columnType=='Integer' || columnType=='Long')
			String ${columnName} = (String)paramMap.get("${columnName}");
			if(${columnName}!=null && ${columnName}.length()>0){
				condition += " and ${columnName} = ?";
				paramList.add(new ${columnType}(${columnName}));
			}
		#elseif(columnType=='String')
			String ${columnName} = (String)paramMap.get("${columnName}");
			if(${columnName}!=null && ${columnName}.length()>0){
				condition += " and ${columnName} like ?";
				paramList.add('%'+${columnName}+'%');
			}
		#elseif(columnType=='Date')
			String ${columnName}_start = (String)paramMap.get("${columnName}_start");
			if(${columnName}_start!=null && ${columnName}_start.length()>0){
				condition += " and date(${columnName}) >= ?";
				paramList.add(DateUtils.stringToDateYMd(${columnName}_start));
			}
			String ${columnName}_end = (String)paramMap.get("${columnName}_end");
			if(${columnName}_end!=null && ${columnName}_end.length()>0){
				condition += " and date(${columnName}) <= ?";
				paramList.add(DateUtils.stringToDateYMd(${columnName}_end));
			}
		#end
	#end
			String sql = "select * from ${modelName} where 1=1" + condition;
			Query query = JPA.em().createNativeQuery(sql, ${modelName}.class);
			
			if(paramList.size()>0){
				for(int i=0;i<paramList.size();i++){
					query.setParameter(i+1, paramList.get(i));
				}
			}
			
			int count = query.getResultList().size();
			query.setFirstResult((page-1)*rows);
			query.setMaxResults(rows);
			
			List<${modelName}> list = query.getResultList();
			map = new HashMap<String, Object>();
			map.put("total", count);
			map.put("rows", list);
			return map;
		} catch (Exception e) {
			Logger.error(e,"查询出错");
			return map;
		}
	}
	
	//保存
	public Result save(${modelName} ${modelVarName}) throws Exception {
		try {
			if(!JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().begin();
			}
			if(${modelVarName}.${primaryKeyName}==null){
				##获取所有列名,并跳过主键
				#set(List columnNameList = new ArrayList(tableInfo.columnInfoMap.keySet())) ${columnNameList.remove(primaryKeyName)?'':''}
				String sql = "insert into `${tableName}`(`${commonUtils.join(columnNameList,'`,`')}`) values (:${commonUtils.join(columnNameList,',:')})";
				Query query = JPA.em().createNativeQuery(sql);
				#for(String columnName : columnNameList)
				query.setParameter("${columnName}",${modelVarName}.${columnName});
				#end
				query.executeUpdate();
			}else{
				##获取所有列名,并跳过主键,和不能修改的列
				#set(List columnNameList = new ArrayList(tableInfo.columnInfoMap.keySet())) ${columnNameList.remove(primaryKeyName)?'':''} ${columnNameList.removeAll(serviceParamMap.noUpdateShowList)?'':''}
				String sql = "update `${tableName}` set ${macroGet("setStr").trim()} where `${primaryKeyName}`=:${primaryKeyName}";
				Query query = JPA.em().createNativeQuery(sql);
				#for(String columnName : columnNameList)
				query.setParameter("${columnName}",${modelVarName}.${columnName});
				#end
				query.setParameter("${primaryKeyName}",${modelVarName}.${primaryKeyName});
				query.executeUpdate();
				
				#macro setStr()
					#for(String columnName : columnNameList)`${columnName}`=:${columnName}${for.last?'':','}#end
				#end
			}
			if(JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().commit();
			}
			return new Result(true,"操作成功");
		} catch (Exception e) {
			if(JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().rollback();
			}
			Logger.error(e,"操作失败,"+JSONUtil.parseObject(${modelVarName}));
			return new Result(false,"操作失败,"+e.getMessage());
		}
	}

	//删除
	public Result deleteById(${primaryKeyType}... ${primaryKeyName}s) {
		try {
			if(!JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().begin();
			}
			String sql = "delete from ${modelVarName} where ${primaryKeyName} in (:${primaryKeyName}s)";
			Query query = JPA.em().createNativeQuery(sql);
			query.setParameter("${primaryKeyName}s", Arrays.asList(${primaryKeyName}s));
			query.executeUpdate();
			if(JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().commit();
			}
			return new Result(true,"操作成功");
		} catch (Exception e) {
			if(JPA.em().getTransaction().isActive()){
				JPA.em().getTransaction().rollback();
			}
			Logger.error(e,"操作失败,"+ids);
			return new Result(false, "操作失败,"+e.getMessage());
		}
	}
	
}